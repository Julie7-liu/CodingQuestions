//There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.
class Solution {
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
    // best solution: binary search
    public double findMedianSortedArrays(int[] A, int[] B){
        int len = A.length + B.length;
        
        if(len % 2 == 0){
            return (findKthLargest(0, A, 0, B, len/2) + findKthLargest(0, A, 0, B, len/2 + 1)) / 2.0;
        }else{
            return findKthLargest(0, A, 0, B, len/2 + 1);
        }
    }
    
    //in each iteration, throw away half of the smaller array
    public double findKthLargest(int startA, int A[], int startB, int[] B, int k){
        // if nothing left in A, look for the kth largest in B
        if(startA >= A.length){
            return B[startB + k - 1];
        }
        
        // if nothing left in B, look for the kth largest in A
        if(startB >= B.length){
            return A[startA + k - 1];
        }
        
        //if k can not be divided
        if(k == 1){
            return Math.min(A[startA], B[startB]);
        }
        
        // compare median of the two arrays, throw away the smaller half
        int numA = startA + k / 2 - 1 < A.length ? A[startA + k / 2 - 1] : Integer.MAX_VALUE;
        int numB = startB + k / 2 - 1 < B.length ? B[startB + k / 2 - 1] : Integer.MAX_VALUE;
        
        if(numA < numB){
            return findKthLargest(startA + k / 2, A, startB, B, k - k / 2);
        }else{
            return findKthLargest(startA, A, startB + k / 2, B, k - k / 2);
        }
    }
     
     
    // inferior solution: merge two sorted arrays, O(m + n)
    // public double findMedianSortedArrays(int[] A, int[] B) {
    //     double median;
    //     int[] merged = merge(A, B);
        
    //     int len = merged.length;
    //     if(len % 2 == 0){
    //         median = (merged[len / 2 - 1] + merged[len / 2]) / 2.0;
    //     }else{
    //         median = merged[len / 2];
    //     }
        
    //     return median;
    // }
    
    // public int[] merge(int[] A, int[] B){
    //     int[] merged = new int[A.length + B.length];
        
    //     int i = 0;
    //     int j = 0;
    //     int k = 0;
    //     while(i < A.length && j < B.length){
    //         if(A[i] <= B[j]){
    //             merged[k ++] = A[i ++];
    //         }else{
    //             merged[k ++] = B[j ++];
    //         }
    //     }
        
    //     while(i < A.length){
    //         merged[k ++] = A[i ++];
    //     }
        
    //     while(j < B.length){
    //         merged[k ++] = B[j ++];
    //     }
        
    //     return merged;
    // }
}


